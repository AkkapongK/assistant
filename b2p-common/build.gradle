buildscript {
	ext {
		kotlin_version = "1.5.31"
		kafka_clients_version = '2.8.0'
	}

	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url = uri("https://plugins.gradle.org/m2/") }
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
	}
}

plugins {
	id 'org.springframework.boot'
}

group = "th.co.dv.b2p"
version = "0.0.1-SNAPSHOT"

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url = uri("https://plugins.gradle.org/m2/") }
	maven { url = uri("https://jitpack.io") }
}

[rootProject, this].each {
	it.repositories {
		maven { url 'https://software.r3.com/artifactory/corda' }
	}
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "kotlin"
apply plugin: "kotlin-noarg"
apply plugin: "io.spring.dependency-management"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-security")

	// For redis
	implementation("org.springframework.data:spring-data-redis")
	implementation("redis.clients:jedis")

	implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlinVersion")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

	// additional libs
	implementation("org.apache.kafka:kafka-clients:$kafka_clients_version")
	implementation("org.apache.commons:commons-text:$apacheCommonVersion")

	// additional libs for corda
	implementation("com.natpryce:konfig:$konfigVersion")
	implementation("com.google.guava:guava:$guavaVersion")

	// Gson
	implementation("com.google.code.gson:gson:2.7")

	// corda libs
	implementation("$cordaReleaseGroup:corda-rpc:$cordaVersion")

	// Test
	testImplementation("org.jetbrains.kotlin:kotlin-test-junit:1.5.31")
//	testImplementation("junit:junit:4.13.2")
	testImplementation("io.mockk:mockk:1.12.0")
	testImplementation("org.springframework.boot:spring-boot-starter-test")

	//upgrade log4j CVE-2021-44228
	implementation("org.apache.logging.log4j:log4j-core:2.17.1")
}

configurations {
	implementation {
		exclude group: "org.jetbrains.kotlin", module: 'kotlin-stdlib-jre8'
	}
	testImplementation  {
		exclude group: "org.junit.vintage", module: 'junit-vintage-engine'
	}
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		languageVersion = "1.5"
		apiVersion = "1.5"
		jvmTarget = JavaVersion.VERSION_1_8
		javaParameters = true   // Useful for reflection.
	}
}

bootRun.enabled = false
bootJar.enabled = false
jar.enabled = true

subprojects {
   tasks.withType<Test> {
      setExcludes(listOf("**"))
   }
}

/**
 * https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin
 */
noArg {
	annotation("th.co.dv.p2p.common.annotations.NoArgConstructor")
}

/**
 * https://docs.gradle.org/current/userguide/publishing_maven.html
 * https://medium.com/@simionrazvan/how-to-create-a-gradle-library-and-publish-it-on-nexus-34be19b520aa
 */
//publishing {
//	publications {
//		create<MavenPublication>("mavenJava") {
//			from(components["java"])
//		}
//	}
//
//	repositories {
//		maven {
//			name = "nexus"
//			url = uri("${property("repoUrl")}")
//			credentials {
//				username = "${property("repoUser")}"
//				password = "${property("repoPassword")}"
//			}
//		}
//	}
//}
