package th.co.dv.p2p.corda.base.models.corda

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.annotation.JsonProperty
import net.corda.core.serialization.CordaSerializable
import th.co.dv.p2p.corda.base.domain.Amount
import th.co.dv.p2p.corda.base.models.PartyModel
import java.util.*

/**
 * @property adjustmentType              the indicator of this credit note to determine subsequent or not
 * @property buyer                       the legal identity node who represents the buyer
 * @property buyerFinalApprovedDate      the buyer approve final date
 * @property buyerFinalApprovedRemark    the buyer remark detail when approve
 * @property buyerFinalApprovedUser      the buyer user approve
 * @property cancelledDate               the date the Vendor team cancelled the credit note
 * @property cancelledRemark             the remark the Vendor team cancelled the credit note
 * @property cancelledUser               the user the Vendor team cancelled the credit note
 * @property companyAddress              the buyer's company address in the external world     [From UI should be Taken From Invoice]
 * @property companyBranchCode           the buyer's company branch code in the external world [From UI should be Taken From Invoice]
 * @property companyBranchName           the buyer's company branch name in the external world [From UI should be Taken From Invoice]
 * @property companyName                 the buyer's company name in the external world        [From UI should be Taken From Invoice]
 * @property companyTaxNumber            the buyer's company tax number in the external world  [From UI should be Taken From Invoice]
 * @property vendorTelephone             the buyer's company telehpone number in the external world  [From UI should be Taken From Invoice]
 * @property creditNoteDate              the Credit Note effective Date
 * @property creditNoteItems             the Credit Note items
 * @property dueDate                     the latest due date of the credit note either from system generated or user manually input
 * @property entryDate                   Credit Note Entry Date and Time
 * @property externalId                  this state's line item number/id in the external world
 * @property invoiceExternalId           the linear id of Invoice Reference No to this Credit Note
 * @property invoiceLinearId             the linear id of Invoice tagged to this Credit Note
 * @property createdBy                   The username that created credit note document
 * @property createdDate                 the created Date of the Credit Note generated by Corda
 * @property lifecycle                   the status of the Credit Note
 * @property linearId                    linear id of Credit Note
 * @property paymentDate                 payment date
 * @property paymentItemLinearId         payment item linearId
 * @property paymentReferenceNumber      payment reference number
 * @property isETaxCreditNote            the flag is true if is e-tax
 * @property rdSubmittedDate             the RD submitted date of the credit note
 * @property reason                      Reason to issue Credit Note
 * @property seller                      the legal identity node who represents the seller
 * @property subTotal                    Total value of Credit Note excluding tax
 * @property total                       Total value of Credit Note including tax
 * @property vatTotal                    Tax value of Credit Note
 * @property vendorAddress               the seller's address in the external world            [From UI should be Taken From Invoice]
 * @property vendorBranchCode            the seller's branch code in the external world        [From UI should be Taken From Invoice]
 * @property vendorBranchName            the seller's branch name in the external world        [From UI should be Taken From Invoice]
 * @property vendorName                  the seller's common name in the external world        [From UI should be Taken From Invoice]
 * @property vendorTaxNumber             the seller's Tax Number in the external world         [From UI should be Taken From Invoice]
 * @property vendorTelephone             the seller's telephone number in the external world   [From UI should be Taken From Invoice]
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@CordaSerializable
@JsonInclude(JsonInclude.Include.NON_NULL)
data class CreditNoteCordaModel(
    val adjustmentType: String? = null,
    val buyer: PartyModel? = null,
    val buyerFinalApprovedDate: String? = null,
    val buyerFinalApprovedRemark: String? = null,
    val buyerFinalApprovedUser: String? = null,
    val cancelledDate: String? = null,
    val cancelledRemark: String? = null,
    val cancelledUser: String? = null,
    val companyAddress: String? =null,
    val companyBranchCode: String? = null,
    val companyBranchName: String? = null,
    val companyName: String? = null,
    val companyTaxNumber: String? = null,
    val companyTelephone: String? = null,
    val createdBy: String? = null,
    val createdDate: String? = null,
    val creditNoteDate: String? = null,
    val creditNoteItems: List<CreditNoteItemCordaModel> = emptyList(),
    val dueDate: String? = null,
    val entryDate: String? = null,
    val externalId: String? = null,
    val invoiceExternalId: String? = null,
    val invoiceLinearId: String? = null,
    @get:JsonProperty("isETaxCreditNote")
    val isETaxCreditNote: Boolean? = null,
    val lifecycle: String? = null,
    val linearId: String? = null,
    val paymentDate: String? = null,
    val paymentReferenceNumber: String? = null,
    val rdSubmittedDate: String? = null,
    val reason: String? = null,
    val seller: PartyModel? = null,
    val paymentItemLinearId: String? = null,
    val subTotal: Amount<Currency>? = null,
    val total: Amount<Currency>? = null,
    val vatTotal: Amount<Currency>? = null,
    val vendorAddress: String? = null,
    val vendorBranchCode: String? = null,
    val vendorBranchName: String? = null,
    val vendorName: String? = null,
    val vendorTaxNumber: String? = null,
    val vendorTelephone: String? = null,
    val documentCode: String? = null
)